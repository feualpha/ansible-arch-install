---
- hosts: localhost
  connection: local

  vars:
    install_drive: "/dev/sda"
    boot_partition_suffix: 1
    swap_partition_suffix: 2
    root_partition_suffix: 3
    timezone: "Asia/Jakarta"
    hostname: Aquila

  vars_prompt:
    - name: user_name
      prompt: What is your username?
      private: no
    - name: user_password
      prompt: What is your password?

  tasks:
    - name: Synchronize clock via NTP
      command: timedatectl set-ntp true
      tags:
        - sync_clock
    - name: Repartition install drive
      block:
        - name: Wipe install drive and all its partitions
          command: find /dev -wholename "{{ install_drive }}*" -exec wipefs --force --all {} \;
          tags:
            - wipefs
        - name: Create boot partition
          parted:
            device: "{{ install_drive }}"
            label: gpt
            number: 1
            part_end: 512MB
            name: boot
            flags: [boot, esp]
            state: present
        - name: Create Swap partition
          parted:
            device: "{{ install_drive }}"
            label: gpt
            number: 2
            name: swap
            part_start: 512MB
            part_end: 8704MB
            state: present
        - name: Create root partition
          parted:
            device: "{{ install_drive }}"
            label: gpt
            number: 3
            part_start: 8704MB
            name: root
            flags: [lvm]
            state: present
      tags:
        - repartition
    - name: Create filesystems
      block:
        - name: Create FAT32 filesystem in boot partition
          filesystem:
            dev: "{{ install_drive }}{{ boot_partition_suffix }}"
            fstype: vfat
            opts: -F32
            force: yes
        - name: Create swap filesystem in swap partition
          filesystem:
            dev: "{{ install_drive }}{{ swap_partition_suffix }}"
            fstype: swap
            force: yes
        - name: Create ext4 filesystem in root volume
          filesystem:
            dev: /dev/mapper/root
            fstype: ext4
            force: yes
        - name: Get UUID for boot filesystem
          command: blkid -s UUID -o value '{{ install_drive }}{{ boot_partition_suffix }}'
          register: boot_uuid
          changed_when: false
        - name: Get UUID for swap filesystem
          command: blkid -s UUID -o value '{{ install_drive }}{{ swap_partition_suffix }}'
          register: swap_uuid
          changed_when: false
        - name: Get UUID for root filesystem
          command: blkid -s UUID -o value /dev/mapper/root
          register: root_uuid
          changed_when: false
      tags:
        - create_filesystems
    - name: Mount filesystems
      block:
        - name: Mount root filesystem
          mount:
            path: /mnt
            src: UUID={{ root_uuid.stdout }}
            fstype: ext4
            state: mounted
        - name: Create mountpoint for boot volume
          file:
            path: /mnt/boot
            state: directory
        - name: Mount boot filesystem
          mount:
            path: /mnt/boot
            src: UUID={{ boot_uuid.stdout }}
            fstype: vfat
            state: mounted
        - name: Set Swap partition
          command: "swapon {{ install_drive }}{{ swap_partition_suffix }}"
      tags:
        - mount_filesystems
    - name: Rank Arch mirrors
      block:
        - name: Install the pacman-contrib package (for rankmirrors)
          pacman:
            name:
              - pacman-contrib
            update_cache: yes
        - name: Use rankmirrors to filter the fastest mirrors that support HTTPS
          shell: curl -s "https://www.archlinux.org/mirrorlist/?country=US&protocol=https&use_mirror_status=on" | sed -e 's/^#Server/Server/' -e '/^#/d' | rankmirrors -n 5 - > /etc/pacman.d/mirrorlist
      tags:
        - mirrors
    - name: Run pacstrap
      command: pacstrap /mnt base base-devel dhclient dhcpcd efibootmgr grub linux linux-firmware netctl openssh sudo wpa_supplicant
      tags:
        - pacstrap
    - name: Generate fstab
      command: genfstab -U /mnt >> /mnt/etc/fstab
      tags:
        - fstab
    - name: Set local timezone
      command: "arch-chroot /mnt ln -sf /usr/share/zoneinfo/{{ timezone }} /etc/localtime"
      tags:
        - timezone
    - name: Generate adjtime file
      command: arch-chroot /mnt hwclock --systohc
      tags:
        - adjtime
    - name: Setup locales
      block:
        - name: Configure locale.gen
          lineinfile:
            dest: /mnt/etc/locale.gen
            regexp: "{{ item.regex }}"
            line: "{{ item.line }}"
          loop:
            - { regex: en_US\.UTF-8 UTF-8, line: en_US.UTF-8 UTF-8 }
            - { regex: id_ID\.UTF-8 UTF-8, line: en_US.UTF-8 UTF-8 }
        - name: Create locale.conf
          copy:
            content: "LANG=en_US.UTF-8"
            dest: /mnt/etc/locale.conf
        - name: Generate locales
          command: arch-chroot /mnt locale-gen
      tags:
        - locales
    - name: Set hostname
      copy:
        content: "{{ hostname }}"
        dest: /mnt/etc/hostname
      tags:
        - hostname
    - name: Setup netctl
      block:
        - name: Create netctl profile for wired connection
          copy:
            content: |
              Description='Wired with DHCP'
              Interface={{ wired_interface }}
              Connection=ethernet
              IP=dhcp
              IP6=dhcp-noaddr
              # IPv6 traffic is tunneled over IPv4, which eats 20 bytes of the MTU.
              ExecUpPost='/usr/bin/ip link set {{ wired_interface }} mtu 1480'
            dest: /mnt/etc/netctl/wired
        - name: Enable wired netctl profile
          command: arch-chroot /mnt netctl enable wired
      tags:
        - netctl
    - name: Enable sshd
      command: arch-chroot /mnt systemctl enable sshd
      tags:
        - sshd
    - name: Set up initramfs
      block:
        - name: Add mkinitcpio.conf hooks
          lineinfile:
            dest: /mnt/etc/mkinitcpio.conf
            regexp: ^HOOKS=
            line: HOOKS=(base udev autodetect keyboard keymap modconf block encrypt lvm2 filesystems fsck)
        - name: Create new initramfs
          command: arch-chroot /mnt mkinitcpio -p linux
      tags:
        - initramfs
        - mkinitcpio
    - name: Set up grub
      block:
        - name: Add commandline information to grub config
          lineinfile:
            dest: /mnt/etc/default/grub
            regexp: ^GRUB_CMDLINE_LINUX=
            line: GRUB_CMDLINE_LINUX="cryptdevice=UUID={{ root_luks_uuid.stdout }}:root root=/dev/mapper/root"
        - name: Install grub
          command: arch-chroot /mnt grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB
        - name: Create grub config
          command: arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg
      tags:
        - grub
    - name: Setup user account
      command: arch-chroot /mnt useradd --create-home --user-group --groups wheel {{ user_name }} --password {{ user_password }}
      tags:
        - user_account
    - name: Give sudo access to wheel group
      copy:
        content: "%wheel ALL=(ALL)"
        dest: /mnt/etc/sudoers.d/wheel
        validate: /usr/sbin/visudo --check --file=%s
      tags:
        - sudo
    - name: Reboot
      reboot:
        connect_timeout: 1
        reboot_timeout: 1
      failed_when: false
      tags:
        - reboot
